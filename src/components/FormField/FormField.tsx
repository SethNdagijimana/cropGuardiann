import { cn } from "@/lib/utils"
import "@/styles/globals.scss"
import { FC, useRef, useState } from "react"
import style from "./FormField.module.scss"
interface FormFieldProps
  extends React.InputHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {
  label: string
  className?: string
  type?: string
  currencySymbol?: string
  isTextArea?: boolean
}

const FormField: FC<FormFieldProps> = ({
  label,
  className,
  type = "text",
  currencySymbol,
  isTextArea = false,
  ...props
}) => {
  const [showPassword, setShowpassword] = useState<boolean>(false)
  const [isFocused, setIsFocused] = useState(false)
  const inputRef = useRef<any>(null)

  const handleFocus = () => {
    setIsFocused(true)
  }

  const handleBlur = () => {
    setIsFocused(false)
  }

  return (
    <>
      <label className="text-primary text-sm select-none mb-[6px]">
        {label}
      </label>
      <div
        className={cn(
          `border border-[#E5EFFF] p-[10px] rounded-md bg-white cursor-pointer transition-all duration-200 ease-in-out`,
          isFocused && ` ring-2 ring-[#4397F7] ${style.inputBorder}`,
          className
        )}
        onClick={() => inputRef.current?.focus()}
      >
        <div className="flex items-center justify-between">
          {currencySymbol && (
            <span className="text-sm text-primary font-medium mr-1 block">
              {currencySymbol}
            </span>
          )}

          {isTextArea ? (
            <textarea
              ref={inputRef}
              className={`bg-transparent w-full focus:outline-none block placeholder:text-[#3B3B3B] placeholder:font-medium text-sm flex-1`}
              {...props}
              onFocus={handleFocus}
              onBlur={handleBlur}
            />
          ) : (
            <input
              ref={inputRef}
              className={`bg-white w-full focus:outline-none block placeholder:text-[#949494] placeholder:font-medium text-sm flex-1`}
              {...props}
              onFocus={handleFocus}
              onBlur={handleBlur}
              type={
                type !== "password" ? type : showPassword ? "text" : "password"
              }
            />
          )}

          {type === "password" && (
            <span
              className="w-6 h-6 flex items-center justify-center flex-shrink-0"
              onClick={(e) => {
                e.stopPropagation()

                // setIsFocused(true)
                setShowpassword((prevState) => !prevState)
                inputRef.current?.focus()
              }}
            >
              {showPassword ? (
                <svg
                  width={16}
                  height={16}
                  viewBox="0 0 16 16"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M14.3628 7.3635C14.5655 7.6477 14.6668 7.78983 14.6668 8.00016C14.6668 8.2105 14.5655 8.35263 14.3628 8.63683C13.4521 9.9139 11.1263 12.6668 8.00016 12.6668C4.87402 12.6668 2.54823 9.9139 1.63752 8.63683C1.43484 8.35263 1.3335 8.2105 1.3335 8.00016C1.3335 7.78983 1.43484 7.6477 1.63752 7.3635C2.54823 6.08646 4.87402 3.3335 8.00016 3.3335C11.1263 3.3335 13.4521 6.08646 14.3628 7.3635Z"
                    stroke="#4397F7"
                  />
                  <path
                    d="M10 8C10 6.8954 9.1046 6 8 6C6.8954 6 6 6.8954 6 8C6 9.1046 6.8954 10 8 10C9.1046 10 10 9.1046 10 8Z"
                    stroke="#4397F7"
                  />
                </svg>
              ) : (
                <svg
                  width={16}
                  height={12}
                  viewBox="0 0 16 12"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M3.36999 0.163792C3.32608 0.114296 3.27279 0.0740073 3.21319 0.0452609C3.1536 0.0165144 3.08889 -0.000118083 3.02282 -0.00367251C2.95675 -0.00722694 2.89063 0.0023673 2.8283 0.0245542C2.76597 0.0467411 2.70865 0.0810794 2.65969 0.125579C2.61072 0.170078 2.57108 0.223854 2.54305 0.283789C2.51502 0.343724 2.49916 0.408626 2.4964 0.474733C2.49364 0.540841 2.50402 0.60684 2.52696 0.668904C2.54989 0.730968 2.58491 0.787863 2.62999 0.836292L3.83249 2.15942C1.56249 3.55254 0.586244 5.70004 0.543119 5.79754C0.51469 5.86149 0.5 5.93069 0.5 6.00067C0.5 6.07065 0.51469 6.13985 0.543119 6.20379C0.564994 6.25317 1.09437 7.42692 2.27124 8.60379C3.83937 10.1713 5.81999 11 7.99999 11C9.12038 11.0064 10.2294 10.7758 11.2544 10.3232L12.6294 11.8363C12.6733 11.8858 12.7266 11.9261 12.7862 11.9548C12.8458 11.9836 12.9105 12.0002 12.9765 12.0038C13.0426 12.0073 13.1087 11.9977 13.1711 11.9755C13.2334 11.9533 13.2907 11.919 13.3397 11.8745C13.3886 11.83 13.4283 11.7762 13.4563 11.7163C13.4843 11.6564 13.5002 11.5915 13.503 11.5254C13.5057 11.4592 13.4953 11.3932 13.4724 11.3312C13.4495 11.2691 13.4145 11.2122 13.3694 11.1638L3.36999 0.163792ZM6.32812 4.90379L8.93249 7.76942C8.5403 7.97574 8.09069 8.04597 7.65426 7.96907C7.21783 7.89217 6.81931 7.67249 6.52126 7.34455C6.22321 7.0166 6.04252 6.59895 6.00756 6.15718C5.9726 5.71541 6.08536 5.27453 6.32812 4.90379ZM7.99999 10C6.07624 10 4.39562 9.30067 3.00437 7.92192C2.43332 7.35441 1.94763 6.70704 1.56249 6.00004C1.85562 5.45067 2.79124 3.91317 4.52187 2.91379L5.64687 4.14817C5.21133 4.70598 4.98702 5.39981 5.01358 6.10702C5.04014 6.81423 5.31586 7.48929 5.79202 8.01286C6.26817 8.53644 6.91409 8.87482 7.61561 8.9682C8.31713 9.06158 9.02908 8.90395 9.62562 8.52317L10.5462 9.53567C9.73374 9.84739 8.87023 10.0049 7.99999 10ZM8.37499 4.03567C8.24471 4.0108 8.12963 3.9352 8.05509 3.82549C7.98054 3.71578 7.95263 3.58095 7.97749 3.45067C8.00236 3.32038 8.07796 3.20531 8.18767 3.13076C8.29738 3.05621 8.43221 3.0283 8.56249 3.05317C9.19975 3.17671 9.77999 3.50295 10.2167 3.98322C10.6534 4.46349 10.9231 5.07207 10.9856 5.71817C10.998 5.85019 10.9574 5.98172 10.8727 6.08381C10.7881 6.1859 10.6664 6.25019 10.5344 6.26254C10.5188 6.26346 10.5031 6.26346 10.4875 6.26254C10.3625 6.26308 10.2419 6.21679 10.1493 6.13281C10.0568 6.04882 9.99905 5.93323 9.98749 5.80879C9.94541 5.37904 9.76575 4.97434 9.47522 4.65488C9.1847 4.33542 8.79883 4.11825 8.37499 4.03567ZM15.455 6.20379C15.4287 6.26254 14.7956 7.66442 13.37 8.94129C13.3213 8.98631 13.2641 9.02119 13.2018 9.04389C13.1395 9.0666 13.0732 9.07667 13.007 9.07353C12.9407 9.0704 12.8758 9.05411 12.8159 9.02561C12.756 8.99712 12.7023 8.957 12.6581 8.90757C12.6138 8.85815 12.5799 8.80042 12.5582 8.73774C12.5365 8.67507 12.5274 8.6087 12.5316 8.5425C12.5358 8.4763 12.5531 8.4116 12.5826 8.35216C12.612 8.29273 12.653 8.23974 12.7031 8.19629C13.4025 7.56793 13.9901 6.82527 14.4406 6.00004C14.0546 5.2924 13.5679 4.64459 12.9956 4.07692C11.6044 2.69942 9.92374 2.00004 7.99999 2.00004C7.59465 1.99955 7.18996 2.03237 6.78999 2.09817C6.72495 2.10967 6.65828 2.10817 6.59382 2.09376C6.52936 2.07934 6.46839 2.0523 6.41444 2.01419C6.3605 1.97609 6.31463 1.92767 6.2795 1.87173C6.24437 1.8158 6.22067 1.75346 6.20978 1.68831C6.19888 1.62316 6.20099 1.55651 6.216 1.49218C6.23101 1.42786 6.25862 1.36715 6.29723 1.31356C6.33583 1.25996 6.38468 1.21455 6.44094 1.17994C6.49719 1.14533 6.55975 1.12221 6.62499 1.11192C7.07947 1.03688 7.53936 0.999457 7.99999 1.00004C10.18 1.00004 12.1606 1.82879 13.7287 3.39692C14.9056 4.57379 15.435 5.74817 15.4569 5.79754C15.4853 5.86149 15.5 5.93069 15.5 6.00067C15.5 6.07065 15.4853 6.13985 15.4569 6.20379H15.455Z"
                    fill="#4397F7"
                  />
                </svg>
              )}
            </span>
          )}
        </div>
      </div>
    </>
  )
}

export default FormField
